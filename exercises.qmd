---
title: "Tables in Quarto"
format: html
---

```{r}
#| label: setup
#| echo: false
#| message: false
library(tidyverse)
library(gapminder)
library(gtsummary)
library(broom)
library(knitr)
```

## Your Turn 1

1.  Using Visual Editor, create a markdown table that represents these data: The Physicians' Health Study enrolled over 22,000 male physicians to study the effect of low-dose aspirin on myocardial infarctions (heart attacks). Of those who took aspirin, 129 had heart attacks, while 10,898 did not. Of those who took the placebo, 239 had heart attacks and 10,795 did not.

2.  Render

## Your Turn 2

1.  Using the `tidy()` function from `broom`, turn `response_model` and `marker_model` into dataframes, binding them together with `bind_rows()`
2.  Turn the resulting dataframe into a table using `kable()`
3.  Set the `eval` chunk option to `true` 
4.  Render

```{r}
#| label: tbl-broom-and-kable
#| eval: false
response_model <- glm(response ~ age + stage, data = trial, family = binomial)
marker_model <- lm(marker ~ trt + stage + age, data = trial)

bind_rows(
  _____(response_model),
  _____(marker_model),
) |> 
  _____()
```

## Your Turn 3

1.  Create a contingency table of `trial` (a dataset from gtsummary) using `tbl_cross()`: set `trt` to the rows and `response` to the columns.
2.  Add a p-value with `add_p()`
3.  Render

```{r}
#| label: tbl-cross

```

## Your Turn 4

1.  Create a summary table of `trial` by the `trt` variable. 
2.  Modify the label for "Grade" to say "Tumor Grade"
3.  Add an overall column and a p-value
4.  Modify the table to use Mean (SD) and n (%) via the `statistic argument:`list(all_continuous() \~ "{mean} ({sd})", all_categorical() \~ "{n} ({p}%)")\`
5.  Bold the labels
6.  Modify the header with `modify_spanning_header(c("stat_1", "stat_2") ~ "**Treatment Received**")`
7. Set the `eval` chunk option to `true`

```{r}
#| label: tbl-one
#| eval: false
trial |> 
  tbl_summary(
    
  )
```

## Your Turn 5

1.  Create a regression table for `response model`; exponentiate the output with `exponentiate = TRUE`
2.  Add a global P-value
3.  Add the model statistics via `add_glance_source_note()`
4.  Italicize the variable levels
5.  Merge the table you just made with `marker_table` using `tbl_merge()`
6. Set the `eval` chunk option to `true`

```{r}
#| label: tbl-two
#| eval: false
response_table <- response_model |> 
  tbl_regression(
    
  )

marker_table <- marker_model |> 
  tbl_regression() |> 
  add_global_p()

both_tables <- list(________, marker_table)
________
```

## Your Turn 6

1.  Add a caption to the merged table above
2.  Reference that table below using this format: `@tbl-name-of-chunk`
3.  Render

In _______, we show two regression models: a linear model of participant markets and a logistic regression model of participant response.

## Take aways
- gtsummary makes it easy to create publication-ready tables in R
- `tbl_summary()` and `tbl_regression()` are key functions for making tables in gtsummary
- Each table can be further formatted or modified using helper functions like `add_overall()` and `bold_labels()`
- The default output is gt, but you can also export to other table formats with `as_*()` functions, e.g. `as_flex_table()`.
